<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__m_v_m_8cpp_source" xml:lang="en-US">
<title>MVM.cpp</title>
<programlisting linenumbering="unnumbered"><anchor xml:id="__m_v_m_8cpp_source_1l00001"/>00001 <emphasis role="comment">//</emphasis>
<anchor xml:id="__m_v_m_8cpp_source_1l00002"/>00002 <emphasis role="comment">//&#32;Created&#32;by&#32;Jajecnik&#32;Marcell&#32;on&#32;2023.&#32;05.&#32;04..</emphasis>
<anchor xml:id="__m_v_m_8cpp_source_1l00003"/>00003 <emphasis role="comment">//</emphasis>
<anchor xml:id="__m_v_m_8cpp_source_1l00004"/>00004 
<anchor xml:id="__m_v_m_8cpp_source_1l00005"/>00005 <emphasis role="preprocessor">#include&#32;&quot;MVM.h&quot;</emphasis>
<anchor xml:id="__m_v_m_8cpp_source_1l00006"/>00006 
<anchor xml:id="__m_v_m_8cpp_source_1l00007"/>00007 <link linkend="_class_company">Company</link>&#32;<link linkend="_class_m_v_m_1a867aeb59ccbb16febf87084cf89d518a">MVM::MVM_company</link>&#32;=&#32;<link linkend="_class_company">Company</link>(<emphasis role="stringliteral">&quot;Meseorszagi&#32;Villamos&#32;Muvek&#32;ZRT.&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;10760798244&quot;</emphasis>);
<anchor xml:id="__m_v_m_8cpp_source_1l00008"/>00008 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_m_v_m_1a76ee8bd73194a5f2b0bc46c7b5cf22dc">MVM::save_version</link>&#32;=&#32;0;
<anchor xml:id="__m_v_m_8cpp_source_1l00009"/>00009 
<anchor xml:id="__m_v_m_8cpp_source_1l00010"/><link linkend="_class_m_v_m_1a4d02ac8bb1dcc2ec5fcf1832cc662f44">00010</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_m_v_m_1a4d02ac8bb1dcc2ec5fcf1832cc662f44">MVM::addClient</link>(<link linkend="_class_client">Client</link>*&#32;client_in)&#32;{
<anchor xml:id="__m_v_m_8cpp_source_1l00011"/>00011 &#32;&#32;&#32;&#32;clients.<link linkend="_class_my_vector_1a1e15063e3a5e1e8153be007099777ccd">push_back</link>(client_in);
<anchor xml:id="__m_v_m_8cpp_source_1l00012"/>00012 }
<anchor xml:id="__m_v_m_8cpp_source_1l00013"/>00013 
<anchor xml:id="__m_v_m_8cpp_source_1l00014"/><link linkend="_class_m_v_m_1aaf3ab005673a931c43b503fd277b3ef1">00014</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_m_v_m_1aaf3ab005673a931c43b503fd277b3ef1">MVM::addContract</link>(<link linkend="_class_client">Client</link>*&#32;client_in,&#32;ContractType&#32;ctype_in,&#32;<emphasis role="keywordtype">int</emphasis>&#32;year_begin,&#32;<emphasis role="keywordtype">int</emphasis>&#32;month_begin,&#32;<emphasis role="keywordtype">int</emphasis>&#32;day_begin,&#32;<emphasis role="keywordtype">int</emphasis>&#32;year_end,&#32;<emphasis role="keywordtype">int</emphasis>&#32;month_end,&#32;<emphasis role="keywordtype">int</emphasis>&#32;day_end,&#32;<emphasis role="keywordtype">int</emphasis>&#32;invo_in_year,&#32;<emphasis role="keywordtype">int</emphasis>&#32;invo_in_month,&#32;<emphasis role="keywordtype">int</emphasis>&#32;invo_in_day,&#32;<emphasis role="keywordtype">double</emphasis>&#32;tariff_in,&#32;<emphasis role="keywordtype">double</emphasis>&#32;balance_in,&#32;<emphasis role="keywordtype">double</emphasis>&#32;consumption_in)&#32;{
<anchor xml:id="__m_v_m_8cpp_source_1l00015"/>00015 &#32;&#32;&#32;&#32;<link linkend="_class_contract">Contract</link>&#32;new_contract(client_in,&#32;ctype_in,&#32;year_begin,&#32;month_begin,&#32;day_begin,&#32;year_end,&#32;month_end,&#32;day_end,&#32;invo_in_year,&#32;invo_in_month,&#32;invo_in_day,&#32;(client_in-&gt;<link linkend="_class_client_1abe53568f6774300b5a9b6d173ed6f118">getSumOfAll_Contract</link>()&#32;+&#32;1),&#32;tariff_in,&#32;balance_in,&#32;consumption_in);
<anchor xml:id="__m_v_m_8cpp_source_1l00016"/>00016 &#32;&#32;&#32;&#32;client_in-&gt;<link linkend="_class_client_1a5952ea10336391d9641b0ad019a0b955">addContract</link>(new_contract);
<anchor xml:id="__m_v_m_8cpp_source_1l00017"/>00017 }
<anchor xml:id="__m_v_m_8cpp_source_1l00018"/>00018 
<anchor xml:id="__m_v_m_8cpp_source_1l00019"/><link linkend="_class_m_v_m_1ab162eae819f75665f30ccfb180374fe2">00019</link> <link linkend="_class_client">Client</link>&#32;*<link linkend="_class_m_v_m_1ab162eae819f75665f30ccfb180374fe2">MVM::getClient</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;name_in,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;somekindofID)&#32;{
<anchor xml:id="__m_v_m_8cpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;clients.<link linkend="_class_my_vector_1ac167e7f4cf1f1f6a01053db2e5efd3a2">size</link>();&#32;++i)&#32;{
<anchor xml:id="__m_v_m_8cpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;subclient_info&#32;=&#32;clients[i]-&gt;getsub_Client_info();
<anchor xml:id="__m_v_m_8cpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(name_in&#32;==&#32;clients[i]-&gt;getName()&#32;&amp;&amp;
<anchor xml:id="__m_v_m_8cpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((subclient_info.substr(subclient_info.length()&#32;-&#32;11,&#32;11)&#32;==&#32;somekindofID&#32;||
<anchor xml:id="__m_v_m_8cpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;subclient_info.substr(subclient_info.length()&#32;-&#32;8,&#32;8)&#32;==&#32;somekindofID)))
<anchor xml:id="__m_v_m_8cpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;clients[i];
<anchor xml:id="__m_v_m_8cpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;}
<anchor xml:id="__m_v_m_8cpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="__m_v_m_8cpp_source_1l00028"/>00028 }
<anchor xml:id="__m_v_m_8cpp_source_1l00029"/>00029 
<anchor xml:id="__m_v_m_8cpp_source_1l00030"/><link linkend="_class_m_v_m_1a15c1b579505a0a699119de338e3f72ed">00030</link> <emphasis role="keyword">const</emphasis>&#32;std::string&#32;<link linkend="_class_m_v_m_1a15c1b579505a0a699119de338e3f72ed">MVM::getCompanyDetails</link>()&#32;{
<anchor xml:id="__m_v_m_8cpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_m_v_m_1a867aeb59ccbb16febf87084cf89d518a">MVM_company</link>.<link linkend="_class_company_1aef6b11a716b32be62330fd8968c4371f">getsub_Client_info</link>();
<anchor xml:id="__m_v_m_8cpp_source_1l00032"/>00032 }
<anchor xml:id="__m_v_m_8cpp_source_1l00033"/>00033 
<anchor xml:id="__m_v_m_8cpp_source_1l00034"/><link linkend="_class_m_v_m_1aa1e7db7cfe6de5a5c2bca90a1b9cce84">00034</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_m_v_m_1aa1e7db7cfe6de5a5c2bca90a1b9cce84">MVM::deleteClient</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;name_in,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;somekindofID)&#32;{
<anchor xml:id="__m_v_m_8cpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;<link linkend="_class_m_v_m_1ab162eae819f75665f30ccfb180374fe2">getClient</link>(name_in,&#32;somekindofID);
<anchor xml:id="__m_v_m_8cpp_source_1l00036"/>00036 }
<anchor xml:id="__m_v_m_8cpp_source_1l00037"/>00037 
<anchor xml:id="__m_v_m_8cpp_source_1l00038"/><link linkend="_class_m_v_m_1acc3d356b0b8e2fef4a7b56b480daec0c">00038</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_m_v_m_1acc3d356b0b8e2fef4a7b56b480daec0c">MVM::save</link>()&#32;{
<anchor xml:id="__m_v_m_8cpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;<link linkend="_class_m_v_m_1a76ee8bd73194a5f2b0bc46c7b5cf22dc">save_version</link>++;
<anchor xml:id="__m_v_m_8cpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;std::string&#32;filename&#32;=&#32;<emphasis role="stringliteral">&quot;save_&quot;</emphasis>&#32;+&#32;std::to_string(<link linkend="_class_m_v_m_1a76ee8bd73194a5f2b0bc46c7b5cf22dc">save_version</link>)&#32;+&#32;<emphasis role="stringliteral">&quot;.txt&quot;</emphasis>;
<anchor xml:id="__m_v_m_8cpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;std::ofstream&#32;outputFile;&#32;&#32;<emphasis role="comment">//&#32;Open&#32;the&#32;file&#32;for&#32;writing</emphasis>
<anchor xml:id="__m_v_m_8cpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;outputFile.open(filename,&#32;std::ios::out);
<anchor xml:id="__m_v_m_8cpp_source_1l00043"/>00043 
<anchor xml:id="__m_v_m_8cpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!outputFile.is_open())&#32;{
<anchor xml:id="__m_v_m_8cpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Error&#32;opening&#32;file&#32;for&#32;writing:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;filename&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__m_v_m_8cpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::ios_base::failure(<emphasis role="stringliteral">&quot;Error&#32;opening&#32;file&#32;for&#32;writing:&#32;&quot;</emphasis>&#32;+&#32;filename);
<anchor xml:id="__m_v_m_8cpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;}
<anchor xml:id="__m_v_m_8cpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;client_number&#32;=&#32;clients.<link linkend="_class_my_vector_1ac167e7f4cf1f1f6a01053db2e5efd3a2">size</link>();
<anchor xml:id="__m_v_m_8cpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;client_number;&#32;i++)
<anchor xml:id="__m_v_m_8cpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;{
<anchor xml:id="__m_v_m_8cpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__m_v_m_8cpp_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;contract_number&#32;=&#32;clients[i]-&gt;getSumOfAll_Contract();
<anchor xml:id="__m_v_m_8cpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;j&#32;=&#32;1;&#32;j&#32;&lt;=&#32;contract_number;&#32;j++)
<anchor xml:id="__m_v_m_8cpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__m_v_m_8cpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_contract">Contract</link>&#32;contract_out;
<anchor xml:id="__m_v_m_8cpp_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{
<anchor xml:id="__m_v_m_8cpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;contract_out&#32;=&#32;clients[i]-&gt;getContract(j);&#32;<emphasis role="comment">//&#32;Throws&#32;exception&#32;when&#32;contract&#32;is&#32;invalid</emphasis>
<anchor xml:id="__m_v_m_8cpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__m_v_m_8cpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;std::range_error&amp;&#32;e)&#32;{
<anchor xml:id="__m_v_m_8cpp_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="__m_v_m_8cpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__m_v_m_8cpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__m_v_m_8cpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outputFile&#32;&lt;&lt;&#32;contract_out.<link linkend="_class_contract_1a2a54f1a29ab8a88a7c63d5aa7cdc0a58">getClient</link>()-&gt;<link linkend="_class_client_1a6865c5e1c8179faa4f3d2a47e500b772">getName</link>()&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__m_v_m_8cpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outputFile&#32;&lt;&lt;&#32;contract_out.<link linkend="_class_contract_1a2a54f1a29ab8a88a7c63d5aa7cdc0a58">getClient</link>()-&gt;<link linkend="_class_client_1a1b7af92ea4fa34d7cc1c8767bd1767c6">getsub_Client_info</link>()&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__m_v_m_8cpp_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outputFile&#32;&lt;&lt;&#32;contract_out.<link linkend="_class_contract_1a222d689da62cfcd441933b7d48aa1840">getContractID</link>()&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__m_v_m_8cpp_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outputFile&#32;&lt;&lt;&#32;contract_out.<link linkend="_class_contract_1a39ab8eac1fca9c006f52421fb3b47de6">Ctype_toString</link>()&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__m_v_m_8cpp_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outputFile&#32;&lt;&lt;&#32;contract_out.<link linkend="_class_contract_1a90dfc571475e24dab6be516786704708">getCtime</link>().<link linkend="_class_contract__date_1ae9239c157785b2afd78125aff7df31cd">getBegin</link>().<link linkend="_class_date_1aceba42d25cb6a888cea3428f80d50359">toString</link>()&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__m_v_m_8cpp_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outputFile&#32;&lt;&lt;&#32;contract_out.<link linkend="_class_contract_1a90dfc571475e24dab6be516786704708">getCtime</link>().<link linkend="_class_contract__date_1a205ddfaf285d153b01ac81edb19a2a45">getEnd</link>().<link linkend="_class_date_1aceba42d25cb6a888cea3428f80d50359">toString</link>()&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__m_v_m_8cpp_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outputFile&#32;&lt;&lt;&#32;contract_out.<link linkend="_class_contract_1aa5fae1ce32f260c950f6cf135fef5ab4">getLast_invoicing</link>().<link linkend="_class_date_1aceba42d25cb6a888cea3428f80d50359">toString</link>()&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__m_v_m_8cpp_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outputFile&#32;&lt;&lt;&#32;std::fixed&#32;&lt;&lt;&#32;std::setprecision(2)&#32;&lt;&lt;&#32;contract_out.<link linkend="_class_contract_1a35dcdf9c4752101f31a34f80b38e9abc">getTariff</link>()&#32;&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__m_v_m_8cpp_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outputFile&#32;&lt;&lt;&#32;std::fixed&#32;&lt;&lt;&#32;std::setprecision(2)&#32;&lt;&lt;&#32;contract_out.<link linkend="_class_contract_1a55ef08f4db0f8146fc42c2bb410b7960">getBalance</link>()&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__m_v_m_8cpp_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outputFile&#32;&lt;&lt;&#32;std::fixed&#32;&lt;&lt;&#32;std::setprecision(2)&#32;&lt;&lt;&#32;contract_out.<link linkend="_class_contract_1a2c1439dea2951f6fe07b889061b89541">getConsumption</link>()&#32;&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__m_v_m_8cpp_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__m_v_m_8cpp_source_1l00074"/>00074 
<anchor xml:id="__m_v_m_8cpp_source_1l00075"/>00075 &#32;&#32;&#32;&#32;}
<anchor xml:id="__m_v_m_8cpp_source_1l00076"/>00076 &#32;&#32;&#32;&#32;outputFile.close();
<anchor xml:id="__m_v_m_8cpp_source_1l00077"/>00077 }
<anchor xml:id="__m_v_m_8cpp_source_1l00078"/>00078 
<anchor xml:id="__m_v_m_8cpp_source_1l00079"/>00079 <emphasis role="keywordtype">bool</emphasis>&#32;MVM::is_all_number(std::string&amp;&#32;str_in)&#32;{
<anchor xml:id="__m_v_m_8cpp_source_1l00080"/>00080 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;str_in.length();&#32;i++)
<anchor xml:id="__m_v_m_8cpp_source_1l00081"/>00081 &#32;&#32;&#32;&#32;{
<anchor xml:id="__m_v_m_8cpp_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!std::isdigit(str_in[i]))&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__m_v_m_8cpp_source_1l00083"/>00083 &#32;&#32;&#32;&#32;}
<anchor xml:id="__m_v_m_8cpp_source_1l00084"/>00084 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__m_v_m_8cpp_source_1l00085"/>00085 }
<anchor xml:id="__m_v_m_8cpp_source_1l00086"/>00086 
<anchor xml:id="__m_v_m_8cpp_source_1l00087"/>00087 <emphasis role="keywordtype">bool</emphasis>&#32;MVM::is_string_double(std::string&amp;&#32;str_in)&#32;{
<anchor xml:id="__m_v_m_8cpp_source_1l00088"/>00088 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;str_len&#32;=&#32;str_in.length();
<anchor xml:id="__m_v_m_8cpp_source_1l00089"/>00089 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;
<anchor xml:id="__m_v_m_8cpp_source_1l00090"/>00090 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(i&lt;str_len&amp;&amp;str_in[i]!=<emphasis role="charliteral">&apos;.&apos;</emphasis>)
<anchor xml:id="__m_v_m_8cpp_source_1l00091"/>00091 &#32;&#32;&#32;&#32;{
<anchor xml:id="__m_v_m_8cpp_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!std::isdigit(str_in[i]))&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__m_v_m_8cpp_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i++;
<anchor xml:id="__m_v_m_8cpp_source_1l00094"/>00094 &#32;&#32;&#32;&#32;}
<anchor xml:id="__m_v_m_8cpp_source_1l00095"/>00095 &#32;&#32;&#32;&#32;i++;
<anchor xml:id="__m_v_m_8cpp_source_1l00096"/>00096 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(i&#32;&lt;&#32;str_len)
<anchor xml:id="__m_v_m_8cpp_source_1l00097"/>00097 &#32;&#32;&#32;&#32;{
<anchor xml:id="__m_v_m_8cpp_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!std::isdigit(str_in[i]))&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__m_v_m_8cpp_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i++;
<anchor xml:id="__m_v_m_8cpp_source_1l00100"/>00100 &#32;&#32;&#32;&#32;};
<anchor xml:id="__m_v_m_8cpp_source_1l00101"/>00101 &#32;&#32;&#32;&#32;
<anchor xml:id="__m_v_m_8cpp_source_1l00102"/>00102 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__m_v_m_8cpp_source_1l00103"/>00103 }
<anchor xml:id="__m_v_m_8cpp_source_1l00104"/>00104 
<anchor xml:id="__m_v_m_8cpp_source_1l00105"/>00105 ContractType&#32;MVM::Ctype_fromString(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;contract_type)&#32;{
<anchor xml:id="__m_v_m_8cpp_source_1l00106"/>00106 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(contract_type&#32;==&#32;std::string(<emphasis role="stringliteral">&quot;Regular&quot;</emphasis>))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ContractType::Regular;
<anchor xml:id="__m_v_m_8cpp_source_1l00107"/>00107 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(contract_type&#32;==&#32;std::string(<emphasis role="stringliteral">&quot;VIP&quot;</emphasis>))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ContractType::VIP;
<anchor xml:id="__m_v_m_8cpp_source_1l00108"/>00108 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(contract_type&#32;==&#32;std::string(<emphasis role="stringliteral">&quot;Premium&quot;</emphasis>))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ContractType::Premium;
<anchor xml:id="__m_v_m_8cpp_source_1l00109"/>00109 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(contract_type&#32;==&#32;std::string(<emphasis role="stringliteral">&quot;Corporate&quot;</emphasis>))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ContractType::Corporate;
<anchor xml:id="__m_v_m_8cpp_source_1l00110"/>00110 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(contract_type&#32;==&#32;std::string(<emphasis role="stringliteral">&quot;Student&quot;</emphasis>))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ContractType::Student;
<anchor xml:id="__m_v_m_8cpp_source_1l00111"/>00111 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(contract_type&#32;==&#32;std::string(<emphasis role="stringliteral">&quot;SeniorCitizen&quot;</emphasis>))&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ContractType::SeniorCitizen;
<anchor xml:id="__m_v_m_8cpp_source_1l00112"/>00112 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(contract_type&#32;==&#32;std::string(<emphasis role="stringliteral">&quot;Government&quot;</emphasis>))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ContractType::Government;
<anchor xml:id="__m_v_m_8cpp_source_1l00113"/>00113 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(contract_type&#32;==&#32;std::string(<emphasis role="stringliteral">&quot;Onetime&quot;</emphasis>))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ContractType::Onetime;
<anchor xml:id="__m_v_m_8cpp_source_1l00114"/>00114 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::invalid_argument(<emphasis role="stringliteral">&quot;Nem&#32;letezo&#32;szerzodes&#32;tipus&quot;</emphasis>);
<anchor xml:id="__m_v_m_8cpp_source_1l00115"/>00115 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ContractType::Onetime;
<anchor xml:id="__m_v_m_8cpp_source_1l00116"/>00116 }
<anchor xml:id="__m_v_m_8cpp_source_1l00117"/>00117 
<anchor xml:id="__m_v_m_8cpp_source_1l00118"/>00118 <emphasis role="keywordtype">void</emphasis>&#32;MVM::load_from_stream(std::istream&amp;&#32;is)&#32;{
<anchor xml:id="__m_v_m_8cpp_source_1l00119"/>00119 &#32;&#32;&#32;&#32;std::string&#32;name_in,&#32;sub_client_info_in,&#32;contract_ID_in,&#32;ctype_in,&#32;begin,&#32;end_in,&#32;&#32;last_invoicing_in,&#32;tariff_in,&#32;balance_in,&#32;consumption_in;
<anchor xml:id="__m_v_m_8cpp_source_1l00120"/>00120 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(
<anchor xml:id="__m_v_m_8cpp_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!std::getline(is,&#32;name_in))&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::out_of_range(<emphasis role="stringliteral">&quot;End&#32;of&#32;file&quot;</emphasis>);
<anchor xml:id="__m_v_m_8cpp_source_1l00122"/>00122 &#32;&#32;&#32;&#32;std::getline(is,&#32;sub_client_info_in);
<anchor xml:id="__m_v_m_8cpp_source_1l00123"/>00123 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&amp;is&#32;!=&#32;&amp;std::cin)&#32;std::getline(is,&#32;contract_ID_in);&#32;
<anchor xml:id="__m_v_m_8cpp_source_1l00124"/>00124 &#32;&#32;&#32;&#32;std::getline(is,&#32;ctype_in);
<anchor xml:id="__m_v_m_8cpp_source_1l00125"/>00125 &#32;&#32;&#32;&#32;std::getline(is,&#32;begin);
<anchor xml:id="__m_v_m_8cpp_source_1l00126"/>00126 &#32;&#32;&#32;&#32;std::getline(is,&#32;end_in);
<anchor xml:id="__m_v_m_8cpp_source_1l00127"/>00127 &#32;&#32;&#32;&#32;std::getline(is,&#32;last_invoicing_in);
<anchor xml:id="__m_v_m_8cpp_source_1l00128"/>00128 &#32;&#32;&#32;&#32;std::getline(is,&#32;tariff_in);
<anchor xml:id="__m_v_m_8cpp_source_1l00129"/>00129 &#32;&#32;&#32;&#32;std::getline(is,&#32;balance_in);
<anchor xml:id="__m_v_m_8cpp_source_1l00130"/>00130 &#32;&#32;&#32;&#32;std::getline(is,&#32;consumption_in);
<anchor xml:id="__m_v_m_8cpp_source_1l00131"/>00131 
<anchor xml:id="__m_v_m_8cpp_source_1l00132"/>00132 &#32;&#32;&#32;&#32;<link linkend="_class_client">Client</link>*&#32;client_in;
<anchor xml:id="__m_v_m_8cpp_source_1l00133"/>00133 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sub_client_info_in.substr(0,&#32;6)&#32;==&#32;<emphasis role="stringliteral">&quot;Person&quot;</emphasis>)&#32;{
<anchor xml:id="__m_v_m_8cpp_source_1l00134"/>00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;client_in&#32;=&#32;<link linkend="_class_m_v_m_1ab162eae819f75665f30ccfb180374fe2">getClient</link>(name_in,&#32;sub_client_info_in.substr(sub_client_info_in.length()&#32;-&#32;8,&#32;8));
<anchor xml:id="__m_v_m_8cpp_source_1l00135"/>00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(client_in&#32;==&#32;<emphasis role="keyword">nullptr</emphasis>)&#32;{
<anchor xml:id="__m_v_m_8cpp_source_1l00136"/>00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;client_in&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_person">Person</link>(name_in,&#32;sub_client_info_in.substr(sub_client_info_in.length()&#32;-&#32;8,&#32;8));
<anchor xml:id="__m_v_m_8cpp_source_1l00137"/>00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_m_v_m_1a4d02ac8bb1dcc2ec5fcf1832cc662f44">addClient</link>(client_in);
<anchor xml:id="__m_v_m_8cpp_source_1l00138"/>00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__m_v_m_8cpp_source_1l00139"/>00139 &#32;&#32;&#32;&#32;}
<anchor xml:id="__m_v_m_8cpp_source_1l00140"/>00140 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(sub_client_info_in.substr(0,&#32;7)&#32;==&#32;<emphasis role="stringliteral">&quot;Company&quot;</emphasis>){
<anchor xml:id="__m_v_m_8cpp_source_1l00141"/>00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;client_in&#32;=&#32;<link linkend="_class_m_v_m_1ab162eae819f75665f30ccfb180374fe2">getClient</link>(name_in,&#32;sub_client_info_in.substr(sub_client_info_in.length()&#32;-&#32;11,&#32;11));
<anchor xml:id="__m_v_m_8cpp_source_1l00142"/>00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(client_in&#32;==&#32;<emphasis role="keyword">nullptr</emphasis>)&#32;{
<anchor xml:id="__m_v_m_8cpp_source_1l00143"/>00143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;client_in&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_company">Company</link>(name_in,&#32;sub_client_info_in.substr(sub_client_info_in.length()&#32;-&#32;11,&#32;11));
<anchor xml:id="__m_v_m_8cpp_source_1l00144"/>00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_m_v_m_1a4d02ac8bb1dcc2ec5fcf1832cc662f44">addClient</link>(client_in);
<anchor xml:id="__m_v_m_8cpp_source_1l00145"/>00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__m_v_m_8cpp_source_1l00146"/>00146 &#32;&#32;&#32;&#32;}
<anchor xml:id="__m_v_m_8cpp_source_1l00147"/>00147 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__m_v_m_8cpp_source_1l00148"/>00148 &#32;&#32;&#32;&#32;{
<anchor xml:id="__m_v_m_8cpp_source_1l00149"/>00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::invalid_argument(<emphasis role="stringliteral">&quot;Rossz&#32;bejovo&#32;adat&quot;</emphasis>);
<anchor xml:id="__m_v_m_8cpp_source_1l00150"/>00150 &#32;&#32;&#32;&#32;}
<anchor xml:id="__m_v_m_8cpp_source_1l00151"/>00151 
<anchor xml:id="__m_v_m_8cpp_source_1l00152"/>00152 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(
<anchor xml:id="__m_v_m_8cpp_source_1l00153"/>00153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;begin.length()&#32;!=&#32;10&#32;&#32;||
<anchor xml:id="__m_v_m_8cpp_source_1l00154"/>00154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;end_in.length()&#32;!=&#32;10&#32;||
<anchor xml:id="__m_v_m_8cpp_source_1l00155"/>00155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;last_invoicing_in.length()&#32;!=&#32;10&#32;||
<anchor xml:id="__m_v_m_8cpp_source_1l00156"/>00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!is_all_number(begin.substr(0,&#32;4))&#32;||
<anchor xml:id="__m_v_m_8cpp_source_1l00157"/>00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!is_all_number(begin.substr(5,&#32;2))&#32;||
<anchor xml:id="__m_v_m_8cpp_source_1l00158"/>00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!is_all_number(begin.substr(8,&#32;2))&#32;||
<anchor xml:id="__m_v_m_8cpp_source_1l00159"/>00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!is_all_number(end_in.substr(0,&#32;4))&#32;||
<anchor xml:id="__m_v_m_8cpp_source_1l00160"/>00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!is_all_number(end_in.substr(5,&#32;2))&#32;||
<anchor xml:id="__m_v_m_8cpp_source_1l00161"/>00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!is_all_number(end_in.substr(8,&#32;2))&#32;||
<anchor xml:id="__m_v_m_8cpp_source_1l00162"/>00162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!is_all_number(last_invoicing_in.substr(0,&#32;4))&#32;||
<anchor xml:id="__m_v_m_8cpp_source_1l00163"/>00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!is_all_number(last_invoicing_in.substr(5,&#32;2))&#32;||
<anchor xml:id="__m_v_m_8cpp_source_1l00164"/>00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!is_all_number(last_invoicing_in.substr(8,&#32;2))&#32;||
<anchor xml:id="__m_v_m_8cpp_source_1l00165"/>00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!is_string_double(tariff_in)&#32;||&#32;
<anchor xml:id="__m_v_m_8cpp_source_1l00166"/>00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!is_string_double(balance_in)&#32;||
<anchor xml:id="__m_v_m_8cpp_source_1l00167"/>00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!is_string_double(consumption_in)
<anchor xml:id="__m_v_m_8cpp_source_1l00168"/>00168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)
<anchor xml:id="__m_v_m_8cpp_source_1l00169"/>00169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::invalid_argument(<emphasis role="stringliteral">&quot;Rossz&#32;bejovo&#32;adat&quot;</emphasis>);
<anchor xml:id="__m_v_m_8cpp_source_1l00170"/>00170 
<anchor xml:id="__m_v_m_8cpp_source_1l00171"/>00171 &#32;&#32;&#32;&#32;<emphasis role="comment">//Conversion</emphasis>
<anchor xml:id="__m_v_m_8cpp_source_1l00172"/>00172 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;year_begin,&#32;month_begin,&#32;day_begin,&#32;year_end,&#32;month_end,&#32;day_end,&#32;invo_in_year,&#32;invo_in_month,&#32;invo_in_day;
<anchor xml:id="__m_v_m_8cpp_source_1l00173"/>00173 
<anchor xml:id="__m_v_m_8cpp_source_1l00174"/>00174 &#32;&#32;&#32;&#32;year_begin&#32;=&#32;std::stoi(begin.substr(0,&#32;4));
<anchor xml:id="__m_v_m_8cpp_source_1l00175"/>00175 &#32;&#32;&#32;&#32;month_begin&#32;=&#32;std::stoi(begin.substr(5,&#32;2));
<anchor xml:id="__m_v_m_8cpp_source_1l00176"/>00176 &#32;&#32;&#32;&#32;day_begin&#32;=&#32;std::stoi(begin.substr(8,&#32;2));
<anchor xml:id="__m_v_m_8cpp_source_1l00177"/>00177 &#32;&#32;&#32;&#32;year_end&#32;=&#32;std::stoi(end_in.substr(0,&#32;4));
<anchor xml:id="__m_v_m_8cpp_source_1l00178"/>00178 &#32;&#32;&#32;&#32;month_end&#32;=&#32;std::stoi(end_in.substr(5,&#32;2));
<anchor xml:id="__m_v_m_8cpp_source_1l00179"/>00179 &#32;&#32;&#32;&#32;day_end&#32;=&#32;std::stoi(end_in.substr(8,&#32;2));
<anchor xml:id="__m_v_m_8cpp_source_1l00180"/>00180 &#32;&#32;&#32;&#32;invo_in_year&#32;=&#32;std::stoi(last_invoicing_in.substr(0,&#32;4));
<anchor xml:id="__m_v_m_8cpp_source_1l00181"/>00181 &#32;&#32;&#32;&#32;invo_in_month&#32;=&#32;std::stoi(last_invoicing_in.substr(5,&#32;2));
<anchor xml:id="__m_v_m_8cpp_source_1l00182"/>00182 &#32;&#32;&#32;&#32;invo_in_day&#32;=&#32;std::stoi(last_invoicing_in.substr(8,&#32;2));
<anchor xml:id="__m_v_m_8cpp_source_1l00183"/>00183 
<anchor xml:id="__m_v_m_8cpp_source_1l00184"/>00184 &#32;&#32;&#32;&#32;
<anchor xml:id="__m_v_m_8cpp_source_1l00185"/>00185 
<anchor xml:id="__m_v_m_8cpp_source_1l00186"/>00186 
<anchor xml:id="__m_v_m_8cpp_source_1l00187"/>00187 &#32;&#32;&#32;&#32;ContractType&#32;contract_type_in&#32;=&#32;Ctype_fromString(ctype_in);
<anchor xml:id="__m_v_m_8cpp_source_1l00188"/>00188 
<anchor xml:id="__m_v_m_8cpp_source_1l00189"/>00189 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;tariffin,&#32;balancein,&#32;consumptionin;
<anchor xml:id="__m_v_m_8cpp_source_1l00190"/>00190 &#32;&#32;&#32;&#32;tariffin&#32;=&#32;std::stod(tariff_in);
<anchor xml:id="__m_v_m_8cpp_source_1l00191"/>00191 &#32;&#32;&#32;&#32;balancein&#32;=&#32;std::stod(balance_in);
<anchor xml:id="__m_v_m_8cpp_source_1l00192"/>00192 &#32;&#32;&#32;&#32;consumptionin&#32;=&#32;std::stod(consumption_in);
<anchor xml:id="__m_v_m_8cpp_source_1l00193"/>00193 &#32;&#32;&#32;&#32;
<anchor xml:id="__m_v_m_8cpp_source_1l00194"/>00194 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&amp;is&#32;!=&#32;&amp;std::cin)&#32;{
<anchor xml:id="__m_v_m_8cpp_source_1l00195"/>00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;contractIDin&#32;=&#32;stoi(contract_ID_in);
<anchor xml:id="__m_v_m_8cpp_source_1l00196"/>00196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_contract">Contract</link>&#32;contract_in(
<anchor xml:id="__m_v_m_8cpp_source_1l00197"/>00197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;client_in,
<anchor xml:id="__m_v_m_8cpp_source_1l00198"/>00198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;contract_type_in,
<anchor xml:id="__m_v_m_8cpp_source_1l00199"/>00199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;year_begin,
<anchor xml:id="__m_v_m_8cpp_source_1l00200"/>00200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;month_begin,
<anchor xml:id="__m_v_m_8cpp_source_1l00201"/>00201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;day_begin,
<anchor xml:id="__m_v_m_8cpp_source_1l00202"/>00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;year_end,
<anchor xml:id="__m_v_m_8cpp_source_1l00203"/>00203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;month_end,
<anchor xml:id="__m_v_m_8cpp_source_1l00204"/>00204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;day_end,
<anchor xml:id="__m_v_m_8cpp_source_1l00205"/>00205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;invo_in_year,
<anchor xml:id="__m_v_m_8cpp_source_1l00206"/>00206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;invo_in_month,
<anchor xml:id="__m_v_m_8cpp_source_1l00207"/>00207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;invo_in_day,
<anchor xml:id="__m_v_m_8cpp_source_1l00208"/>00208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;contractIDin,
<anchor xml:id="__m_v_m_8cpp_source_1l00209"/>00209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tariffin,
<anchor xml:id="__m_v_m_8cpp_source_1l00210"/>00210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;balancein,
<anchor xml:id="__m_v_m_8cpp_source_1l00211"/>00211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;consumptionin
<anchor xml:id="__m_v_m_8cpp_source_1l00212"/>00212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;);
<anchor xml:id="__m_v_m_8cpp_source_1l00213"/>00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;client_in-&gt;<link linkend="_class_client_1a5952ea10336391d9641b0ad019a0b955">addContract</link>(contract_in);
<anchor xml:id="__m_v_m_8cpp_source_1l00214"/>00214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__m_v_m_8cpp_source_1l00215"/>00215 &#32;&#32;&#32;&#32;}
<anchor xml:id="__m_v_m_8cpp_source_1l00216"/>00216 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__m_v_m_8cpp_source_1l00217"/>00217 &#32;&#32;&#32;&#32;{
<anchor xml:id="__m_v_m_8cpp_source_1l00218"/>00218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_m_v_m_1aaf3ab005673a931c43b503fd277b3ef1">addContract</link>(client_in,
<anchor xml:id="__m_v_m_8cpp_source_1l00219"/>00219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;contract_type_in,
<anchor xml:id="__m_v_m_8cpp_source_1l00220"/>00220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;year_begin,
<anchor xml:id="__m_v_m_8cpp_source_1l00221"/>00221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;month_begin,
<anchor xml:id="__m_v_m_8cpp_source_1l00222"/>00222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;day_begin,
<anchor xml:id="__m_v_m_8cpp_source_1l00223"/>00223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;year_end,
<anchor xml:id="__m_v_m_8cpp_source_1l00224"/>00224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;month_end,
<anchor xml:id="__m_v_m_8cpp_source_1l00225"/>00225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;day_end,
<anchor xml:id="__m_v_m_8cpp_source_1l00226"/>00226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;invo_in_year,
<anchor xml:id="__m_v_m_8cpp_source_1l00227"/>00227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;invo_in_month,
<anchor xml:id="__m_v_m_8cpp_source_1l00228"/>00228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;invo_in_day,
<anchor xml:id="__m_v_m_8cpp_source_1l00229"/>00229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tariffin,
<anchor xml:id="__m_v_m_8cpp_source_1l00230"/>00230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;balancein,
<anchor xml:id="__m_v_m_8cpp_source_1l00231"/>00231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;consumptionin);
<anchor xml:id="__m_v_m_8cpp_source_1l00232"/>00232 &#32;&#32;&#32;&#32;}
<anchor xml:id="__m_v_m_8cpp_source_1l00233"/>00233 
<anchor xml:id="__m_v_m_8cpp_source_1l00234"/>00234 &#32;&#32;&#32;&#32;
<anchor xml:id="__m_v_m_8cpp_source_1l00235"/>00235 &#32;&#32;&#32;&#32;
<anchor xml:id="__m_v_m_8cpp_source_1l00236"/>00236 };
<anchor xml:id="__m_v_m_8cpp_source_1l00237"/>00237 
<anchor xml:id="__m_v_m_8cpp_source_1l00238"/><link linkend="_class_m_v_m_1aac79d563bd302a9441385ae5b16ebc0e">00238</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_m_v_m_1aac79d563bd302a9441385ae5b16ebc0e">MVM::load_from_save</link>(<emphasis role="keywordtype">int</emphasis>&#32;version_id_in)&#32;{
<anchor xml:id="__m_v_m_8cpp_source_1l00239"/>00239 &#32;&#32;&#32;&#32;std::string&#32;filename&#32;=&#32;<emphasis role="stringliteral">&quot;save_&quot;</emphasis>&#32;+&#32;std::to_string(version_id_in)&#32;+&#32;<emphasis role="stringliteral">&quot;.txt&quot;</emphasis>;
<anchor xml:id="__m_v_m_8cpp_source_1l00240"/>00240 &#32;&#32;&#32;&#32;std::ifstream&#32;inputFile;&#32;&#32;
<anchor xml:id="__m_v_m_8cpp_source_1l00241"/>00241 &#32;&#32;&#32;&#32;inputFile.open(filename,&#32;std::ios::in);
<anchor xml:id="__m_v_m_8cpp_source_1l00242"/>00242 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!inputFile.is_open())&#32;{
<anchor xml:id="__m_v_m_8cpp_source_1l00243"/>00243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Error&#32;opening&#32;file&#32;for&#32;reading:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;filename&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__m_v_m_8cpp_source_1l00244"/>00244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::ios_base::failure(<emphasis role="stringliteral">&quot;Error&#32;opening&#32;file&#32;for&#32;reading:&#32;&quot;</emphasis>&#32;+&#32;filename);
<anchor xml:id="__m_v_m_8cpp_source_1l00245"/>00245 &#32;&#32;&#32;&#32;}
<anchor xml:id="__m_v_m_8cpp_source_1l00246"/>00246 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(inputFile)
<anchor xml:id="__m_v_m_8cpp_source_1l00247"/>00247 &#32;&#32;&#32;&#32;{
<anchor xml:id="__m_v_m_8cpp_source_1l00248"/>00248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{
<anchor xml:id="__m_v_m_8cpp_source_1l00249"/>00249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;load_from_stream(inputFile);
<anchor xml:id="__m_v_m_8cpp_source_1l00250"/>00250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__m_v_m_8cpp_source_1l00251"/>00251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;std::invalid_argument&amp;&#32;ia)&#32;{
<anchor xml:id="__m_v_m_8cpp_source_1l00252"/>00252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Invalid&#32;argument:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;ia.what()&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
<anchor xml:id="__m_v_m_8cpp_source_1l00253"/>00253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::invalid_argument(<emphasis role="stringliteral">&quot;Rossz&#32;forrasfajl&quot;</emphasis>);
<anchor xml:id="__m_v_m_8cpp_source_1l00254"/>00254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__m_v_m_8cpp_source_1l00255"/>00255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;std::out_of_range&amp;&#32;end)&#32;{&#32;<emphasis role="keywordflow">break</emphasis>;&#32;}
<anchor xml:id="__m_v_m_8cpp_source_1l00256"/>00256 &#32;&#32;&#32;&#32;}
<anchor xml:id="__m_v_m_8cpp_source_1l00257"/>00257 &#32;&#32;&#32;&#32;inputFile.close();
<anchor xml:id="__m_v_m_8cpp_source_1l00258"/>00258 }
<anchor xml:id="__m_v_m_8cpp_source_1l00259"/>00259 
<anchor xml:id="__m_v_m_8cpp_source_1l00260"/><link linkend="_class_m_v_m_1af8d9a226af83b063fe0bb7defb8e616c">00260</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_m_v_m_1af8d9a226af83b063fe0bb7defb8e616c">MVM::load_from_console</link>()&#32;{
<anchor xml:id="__m_v_m_8cpp_source_1l00261"/>00261 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Kerem&#32;adja&#32;meg&#32;a&#32;szerzodés&#32;adatait&#32;az&#32;alabbi&#32;minta&#32;alapjan:&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__m_v_m_8cpp_source_1l00262"/>00262 &#32;&#32;&#32;&#32;std::cout&lt;&lt;<emphasis role="stringliteral">&quot;Nev&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__m_v_m_8cpp_source_1l00263"/>00263 &#32;&#32;&#32;&#32;std::cout&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Ugyfel&#32;tipusa&#32;es&#32;azonositoja&#32;(Person/Company,&#32;ceg&#32;eseten&#32;az&#32;adoazonosito&#32;11&#32;jegyu,&#32;maganszemely&#32;szemelyigazolvanyszama&#32;8&#32;kerekteru)&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__m_v_m_8cpp_source_1l00264"/>00264 &#32;&#32;&#32;&#32;std::cout&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Szerzodes&#32;tipusa:&#32;(Regular/VIP/Premium/Corporate/Student/SeniorCitizen/Government/Onetime)&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__m_v_m_8cpp_source_1l00265"/>00265 &#32;&#32;&#32;&#32;std::cout&lt;&lt;<emphasis role="stringliteral">&quot;Szerzodes&#32;kezdete:&#32;(pl.:&#32;2004-03-11)&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__m_v_m_8cpp_source_1l00266"/>00266 &#32;&#32;&#32;&#32;std::cout&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Szerzodes&#32;vege:&#32;(pl.:&#32;2004-03-11)&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__m_v_m_8cpp_source_1l00267"/>00267 &#32;&#32;&#32;&#32;std::cout&lt;&lt;<emphasis role="stringliteral">&quot;Legutobbi&#32;szamlazas&#32;napja:&#32;(pl.:&#32;2004-03-11)&#32;ha&#32;meg&#32;nem&#32;volt&#32;a&#32;szerzodes&#32;kezdetének&#32;napja&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__m_v_m_8cpp_source_1l00268"/>00268 &#32;&#32;&#32;&#32;std::cout&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Tarifa&#32;erteke&#32;(kw/h-ban&#32;megadva,&#32;mertekegyseg&#32;nelkul)&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__m_v_m_8cpp_source_1l00269"/>00269 &#32;&#32;&#32;&#32;std::cout&lt;&lt;<emphasis role="stringliteral">&quot;Egyenleg&#32;erteke&#32;(Ft-ban&#32;megadva,&#32;mertekegyseg&#32;nelkul)&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__m_v_m_8cpp_source_1l00270"/>00270 &#32;&#32;&#32;&#32;std::cout&lt;&lt;<emphasis role="stringliteral">&quot;Fogyasztas&#32;erteke&#32;(kw/h-ban&#32;megadva,&#32;mertekegyseg&#32;nelkul)&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__m_v_m_8cpp_source_1l00271"/>00271 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{
<anchor xml:id="__m_v_m_8cpp_source_1l00272"/>00272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;load_from_stream(std::cin);
<anchor xml:id="__m_v_m_8cpp_source_1l00273"/>00273 &#32;&#32;&#32;&#32;}
<anchor xml:id="__m_v_m_8cpp_source_1l00274"/>00274 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;std::invalid_argument&amp;&#32;ia)&#32;{
<anchor xml:id="__m_v_m_8cpp_source_1l00275"/>00275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Invalid&#32;argument:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;ia.what()&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
<anchor xml:id="__m_v_m_8cpp_source_1l00276"/>00276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::invalid_argument(<emphasis role="stringliteral">&quot;Rosszul&#32;megadott&#32;adat(ok)&quot;</emphasis>);
<anchor xml:id="__m_v_m_8cpp_source_1l00277"/>00277 &#32;&#32;&#32;&#32;}
<anchor xml:id="__m_v_m_8cpp_source_1l00278"/>00278 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Bevitel&#32;sikeres!&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__m_v_m_8cpp_source_1l00279"/>00279 }
<anchor xml:id="__m_v_m_8cpp_source_1l00280"/>00280 
<anchor xml:id="__m_v_m_8cpp_source_1l00281"/><link linkend="_class_m_v_m_1afbd4ab1c335c46b4c6837fd5c957ee00">00281</link> <link linkend="_class_m_v_m_1afbd4ab1c335c46b4c6837fd5c957ee00">MVM::~MVM</link>(){
<anchor xml:id="__m_v_m_8cpp_source_1l00282"/>00282 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;clients.<link linkend="_class_my_vector_1ac167e7f4cf1f1f6a01053db2e5efd3a2">size</link>();&#32;i++)
<anchor xml:id="__m_v_m_8cpp_source_1l00283"/>00283 &#32;&#32;&#32;&#32;{
<anchor xml:id="__m_v_m_8cpp_source_1l00284"/>00284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;clients[i];
<anchor xml:id="__m_v_m_8cpp_source_1l00285"/>00285 &#32;&#32;&#32;&#32;}
<anchor xml:id="__m_v_m_8cpp_source_1l00286"/>00286 }
</programlisting></section>
